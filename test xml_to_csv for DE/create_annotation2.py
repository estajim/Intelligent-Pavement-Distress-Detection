import csv
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
import datetime
import os
import glob
from xml.etree import ElementTree
from xml.dom import minidom
import sys
def prettify(elem):

    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="    ")

generated_on = str(datetime.datetime.now())

def create_xml(img_path, folder_name, img_name,size_array,segmented_val,objects):
    # Configure one attribute with set()
    root = Element('annotation')
    folder = SubElement(root,"folder")
    folder.text = folder_name
    filename = SubElement(root, "filename")
    filename.text = img_name
    path = SubElement(root, "path")
    path.text = img_path
    source = SubElement(root,'source')
    database=SubElement(source,"database")
    database.text="Unknown"
    size = SubElement(root, "size")
    width=SubElement(size,"width")
    width.text = str(size_array[0])

    height=SubElement(size,"height")
    height.text = str(size_array[1])

    depth=SubElement(size,"depth")
    depth.text = str(size_array[2])

    segmented = SubElement(root, "segmented")
    segmented.text = segmented_val

    fixed_path = os.path.join(os.getcwd(), 'DE_annotations_byKML')
    with open(fixed_path+'\\'+objects, 'rt') as f:
        current_group = None
        reader = csv.reader(f)
        for row in reader:
            print(row)
            name_value, pose_value, truncated_value, difficult_value, bndbox_value= row
            object = SubElement(root, 'object')
            name = SubElement(object, "name")
            name.text = name_value
            pose = SubElement(object, "pose")
            pose.text = pose_value
            truncated = SubElement(object, "truncated")
            truncated.text = truncated_value
            difficult = SubElement(object, "difficult")
            difficult.text = difficult_value
            bndbox = SubElement(object, "bndbox")
            xmin = SubElement(bndbox,"xmin")
            xmin.text=bndbox_value[0]
            xmax = SubElement(bndbox,"xmax")
            xmax.text=bndbox_value[1]
            ymin = SubElement(bndbox,"ymin")
            ymin.text=bndbox_value[2]
            ymax = SubElement(bndbox,"ymax")
            ymax.text=bndbox_value[3]
            # Add this podcast to the group,
            # setting all of its attributes at
            # once.

    # title.text = 'My Podcasts'
    #dc = SubElement(head, 'dateCreated')
    #dc.text = generated_on
    #dm = SubElement(head, 'dateModified')
    #dm.text = generated_on
    #root.append(Comment('Generated by ElementTree_csv_to_xml.py for PyMOTW'))


    return prettify(root)

img_path = os.path.join(os.getcwd(), 'DE_annotations_byKML')
folder_name=img_path.split("\\")[-1]
img_name=glob.glob(img_path + '/*.kml')[0].split("\\")[-1].split(".")[0]
print(img_path)
print(folder_name)
print(img_name)
#sys.exit()
img_path="A"
folder_name="B"
img_name="C"
print(create_xml(img_path,folder_name,img_name,(100,400,3),0,"objects.csv"))

'''

with open('podcasts.csv', 'rt') as f:
    current_group = None
    reader = csv.reader(f)
    for row in reader:
        group_name, podcast_name, xml_url, html_url = row
        if current_group is None or group_name != current_group.text:
            # Start a new group
            current_group = SubElement(body, 'outline', {'text':group_name})
        # Add this podcast to the group,
        # setting all of its attributes at
        # once.
        podcast = SubElement(current_group, 'outline',
                             {'text':podcast_name,
                              'xmlUrl':xml_url,
                              'htmlUrl':html_url,
                              })
            
'''







'''
    with open(fixed_path+'\\objects.csv', 'rt') as f:
        current_group = None
        reader = csv.reader(f)
        for row in reader:
            print(row)
            name_value, pose_value, truncated_value, difficult_value, bndbox_value= row
            if current_group is None or group_name != current_group.text:
                # Start a new group
                current_group = SubElement(root, 'object', {'text': name_value})
            # Add this podcast to the group,
            # setting all of its attributes at
            # once.
            podcast = SubElement(current_group, 'outline',
                                 {'pose': pose_value,
                                  'truncated': truncated_value,
                                  'difficult': difficult_value,
                                  })
'''